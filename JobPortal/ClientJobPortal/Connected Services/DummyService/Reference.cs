//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientJobPortal.DummyService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Candidate", Namespace="http://schemas.datacontract.org/2004/07/JobPortal")]
    [System.SerializableAttribute()]
    public partial class Candidate : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CollageNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] JobExperiencesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PreferedJobLocationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] SkillsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CollageName {
            get {
                return this.CollageNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CollageNameField, value) != true)) {
                    this.CollageNameField = value;
                    this.RaisePropertyChanged("CollageName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfBirth {
            get {
                return this.DateOfBirthField;
            }
            set {
                if ((this.DateOfBirthField.Equals(value) != true)) {
                    this.DateOfBirthField = value;
                    this.RaisePropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] JobExperiences {
            get {
                return this.JobExperiencesField;
            }
            set {
                if ((object.ReferenceEquals(this.JobExperiencesField, value) != true)) {
                    this.JobExperiencesField = value;
                    this.RaisePropertyChanged("JobExperiences");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mobile {
            get {
                return this.MobileField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileField, value) != true)) {
                    this.MobileField = value;
                    this.RaisePropertyChanged("Mobile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] PreferedJobLocations {
            get {
                return this.PreferedJobLocationsField;
            }
            set {
                if ((object.ReferenceEquals(this.PreferedJobLocationsField, value) != true)) {
                    this.PreferedJobLocationsField = value;
                    this.RaisePropertyChanged("PreferedJobLocations");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Skills {
            get {
                return this.SkillsField;
            }
            set {
                if ((object.ReferenceEquals(this.SkillsField, value) != true)) {
                    this.SkillsField = value;
                    this.RaisePropertyChanged("Skills");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DummyService.ICandidateService")]
    public interface ICandidateService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/GetAllCandidates", ReplyAction="http://tempuri.org/ICandidateService/GetAllCandidatesResponse")]
        ClientJobPortal.DummyService.Candidate[] GetAllCandidates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/GetAllCandidates", ReplyAction="http://tempuri.org/ICandidateService/GetAllCandidatesResponse")]
        System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate[]> GetAllCandidatesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/GetCandidate", ReplyAction="http://tempuri.org/ICandidateService/GetCandidateResponse")]
        ClientJobPortal.DummyService.Candidate GetCandidate(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/GetCandidate", ReplyAction="http://tempuri.org/ICandidateService/GetCandidateResponse")]
        System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> GetCandidateAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/AddCandidate", ReplyAction="http://tempuri.org/ICandidateService/AddCandidateResponse")]
        ClientJobPortal.DummyService.Candidate AddCandidate(ClientJobPortal.DummyService.Candidate candidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/AddCandidate", ReplyAction="http://tempuri.org/ICandidateService/AddCandidateResponse")]
        System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> AddCandidateAsync(ClientJobPortal.DummyService.Candidate candidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/RemoveCandidate", ReplyAction="http://tempuri.org/ICandidateService/RemoveCandidateResponse")]
        ClientJobPortal.DummyService.Candidate RemoveCandidate(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/RemoveCandidate", ReplyAction="http://tempuri.org/ICandidateService/RemoveCandidateResponse")]
        System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> RemoveCandidateAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/UpdateCandidate", ReplyAction="http://tempuri.org/ICandidateService/UpdateCandidateResponse")]
        ClientJobPortal.DummyService.Candidate UpdateCandidate(ClientJobPortal.DummyService.Candidate candidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandidateService/UpdateCandidate", ReplyAction="http://tempuri.org/ICandidateService/UpdateCandidateResponse")]
        System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> UpdateCandidateAsync(ClientJobPortal.DummyService.Candidate candidate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICandidateServiceChannel : ClientJobPortal.DummyService.ICandidateService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CandidateServiceClient : System.ServiceModel.ClientBase<ClientJobPortal.DummyService.ICandidateService>, ClientJobPortal.DummyService.ICandidateService {
        
        public CandidateServiceClient() {
        }
        
        public CandidateServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CandidateServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CandidateServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CandidateServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ClientJobPortal.DummyService.Candidate[] GetAllCandidates() {
            return base.Channel.GetAllCandidates();
        }
        
        public System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate[]> GetAllCandidatesAsync() {
            return base.Channel.GetAllCandidatesAsync();
        }
        
        public ClientJobPortal.DummyService.Candidate GetCandidate(int id) {
            return base.Channel.GetCandidate(id);
        }
        
        public System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> GetCandidateAsync(int id) {
            return base.Channel.GetCandidateAsync(id);
        }
        
        public ClientJobPortal.DummyService.Candidate AddCandidate(ClientJobPortal.DummyService.Candidate candidate) {
            return base.Channel.AddCandidate(candidate);
        }
        
        public System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> AddCandidateAsync(ClientJobPortal.DummyService.Candidate candidate) {
            return base.Channel.AddCandidateAsync(candidate);
        }
        
        public ClientJobPortal.DummyService.Candidate RemoveCandidate(int id) {
            return base.Channel.RemoveCandidate(id);
        }
        
        public System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> RemoveCandidateAsync(int id) {
            return base.Channel.RemoveCandidateAsync(id);
        }
        
        public ClientJobPortal.DummyService.Candidate UpdateCandidate(ClientJobPortal.DummyService.Candidate candidate) {
            return base.Channel.UpdateCandidate(candidate);
        }
        
        public System.Threading.Tasks.Task<ClientJobPortal.DummyService.Candidate> UpdateCandidateAsync(ClientJobPortal.DummyService.Candidate candidate) {
            return base.Channel.UpdateCandidateAsync(candidate);
        }
    }
}
